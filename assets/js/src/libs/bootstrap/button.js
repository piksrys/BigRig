/*!
  * Bootstrap button.js v4.4.1 (https://getbootstrap.com/)
  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery')) :
  typeof define === 'function' && define.amd ? define(['jquery'], factory) :
  (global = global || self, global.Button = factory(global.jQuery));
}(this, (function ($) { 'use strict';

  $ = $ && $.hasOwnProperty('default') ? $['default'] : $;

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME = 'button';
  var VERSION = '4.4.1';
  var DATA_KEY = 'bs.button';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $.fn[NAME];
  var ClassName = {
    ACTIVE: 'active',
    BUTTON: 'btn',
    FOCUS: 'focus'
  };
  var Selector = {
    DATA_TOGGLE_CARROT: '[data-toggle^="button"]',
    DATA_TOGGLES: '[data-toggle="buttons"]',
    DATA_TOGGLE: '[data-toggle="button"]',
    DATA_TOGGLES_BUTTONS: '[data-toggle="buttons"] .btn',
    INPUT: 'input:not([type="hidden"])',
    ACTIVE: '.active',
    BUTTON: '.btn'
  };
  var Event = {
    CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY,
    FOCUS_BLUR_DATA_API: "focus" + EVENT_KEY + DATA_API_KEY + " " + ("blur" + EVENT_KEY + DATA_API_KEY),
    LOAD_DATA_API: "load" + EVENT_KEY + DATA_API_KEY
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Button =
  /*#__PURE__*/
  function () {
    function Button(element) {
      this._element = element;
    } // Getters


    var _proto = Button.prototype;

    // Public
    _proto.toggle = function toggle() {
      var triggerChangeEvent = true;
      var addAriaPressed = true;
      var rootElement = $(this._element).closest(Selector.DATA_TOGGLES)[0];

      if (rootElement) {
        var input = this._element.querySelector(Selector.INPUT);

        if (input) {
          if (input.type === 'radio') {
            if (input.checked && this._element.classList.contains(ClassName.ACTIVE)) {
              triggerChangeEvent = false;
            } else {
              var activeElement = rootElement.querySelector(Selector.ACTIVE);

              if (activeElement) {
                $(activeElement).removeClass(ClassName.ACTIVE);
              }
            }
          } else if (input.type === 'checkbox') {
            if (this._element.tagName === 'LABEL' && input.checked === this._element.classList.contains(ClassName.ACTIVE)) {
              triggerChangeEvent = false;
            }
          } else {
            // if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input
            triggerChangeEvent = false;
          }

          if (triggerChangeEvent) {
            input.checked = !this._element.classList.contains(ClassName.ACTIVE);
            $(input).trigger('change');
          }

          input.focus();
          addAriaPressed = false;
        }
      }

      if (!(this._element.hasAttribute('disabled') || this._element.classList.contains('disabled'))) {
        if (addAriaPressed) {
          this._element.setAttribute('aria-pressed', !this._element.classList.contains(ClassName.ACTIVE));
        }

        if (triggerChangeEvent) {
          $(this._element).toggleClass(ClassName.ACTIVE);
        }
      }
    };

    _proto.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY);
      this._element = null;
    } // Static
    ;

    Button._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY);

        if (!data) {
          data = new Button(this);
          $(this).data(DATA_KEY, data);
        }

        if (config === 'toggle') {
          data[config]();
        }
      });
    };

    _createClass(Button, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }]);

    return Button;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {
    var button = event.target;

    if (!$(button).hasClass(ClassName.BUTTON)) {
      button = $(button).closest(Selector.BUTTON)[0];
    }

    if (!button || button.hasAttribute('disabled') || button.classList.contains('disabled')) {
      event.preventDefault(); // work around Firefox bug #1540995
    } else {
      var inputBtn = button.querySelector(Selector.INPUT);

      if (inputBtn && (inputBtn.hasAttribute('disabled') || inputBtn.classList.contains('disabled'))) {
        event.preventDefault(); // work around Firefox bug #1540995

        return;
      }

      Button._jQueryInterface.call($(button), 'toggle');
    }
  }).on(Event.FOCUS_BLUR_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {
    var button = $(event.target).closest(Selector.BUTTON)[0];
    $(button).toggleClass(ClassName.FOCUS, /^focus(in)?$/.test(event.type));
  });
  $(window).on(Event.LOAD_DATA_API, function () {
    // ensure correct active class is set to match the controls' actual values/states
    // find all checkboxes/readio buttons inside data-toggle groups
    var buttons = [].slice.call(document.querySelectorAll(Selector.DATA_TOGGLES_BUTTONS));

    for (var i = 0, len = buttons.length; i < len; i++) {
      var button = buttons[i];
      var input = button.querySelector(Selector.INPUT);

      if (input.checked || input.hasAttribute('checked')) {
        button.classList.add(ClassName.ACTIVE);
      } else {
        button.classList.remove(ClassName.ACTIVE);
      }
    } // find all button toggles


    buttons = [].slice.call(document.querySelectorAll(Selector.DATA_TOGGLE));

    for (var _i = 0, _len = buttons.length; _i < _len; _i++) {
      var _button = buttons[_i];

      if (_button.getAttribute('aria-pressed') === 'true') {
        _button.classList.add(ClassName.ACTIVE);
      } else {
        _button.classList.remove(ClassName.ACTIVE);
      }
    }
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME] = Button._jQueryInterface;
  $.fn[NAME].Constructor = Button;

  $.fn[NAME].noConflict = function () {
    $.fn[NAME] = JQUERY_NO_CONFLICT;
    return Button._jQueryInterface;
  };

  return Button;

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmpzIiwic291cmNlcyI6WyIuLi9zcmMvYnV0dG9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuNC4xKTogYnV0dG9uLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUgICAgICAgICAgICAgICAgPSAnYnV0dG9uJ1xuY29uc3QgVkVSU0lPTiAgICAgICAgICAgICA9ICc0LjQuMSdcbmNvbnN0IERBVEFfS0VZICAgICAgICAgICAgPSAnYnMuYnV0dG9uJ1xuY29uc3QgRVZFTlRfS0VZICAgICAgICAgICA9IGAuJHtEQVRBX0tFWX1gXG5jb25zdCBEQVRBX0FQSV9LRVkgICAgICAgID0gJy5kYXRhLWFwaSdcbmNvbnN0IEpRVUVSWV9OT19DT05GTElDVCAgPSAkLmZuW05BTUVdXG5cbmNvbnN0IENsYXNzTmFtZSA9IHtcbiAgQUNUSVZFIDogJ2FjdGl2ZScsXG4gIEJVVFRPTiA6ICdidG4nLFxuICBGT0NVUyAgOiAnZm9jdXMnXG59XG5cbmNvbnN0IFNlbGVjdG9yID0ge1xuICBEQVRBX1RPR0dMRV9DQVJST1QgICA6ICdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJyxcbiAgREFUQV9UT0dHTEVTICAgICAgICAgOiAnW2RhdGEtdG9nZ2xlPVwiYnV0dG9uc1wiXScsXG4gIERBVEFfVE9HR0xFICAgICAgICAgIDogJ1tkYXRhLXRvZ2dsZT1cImJ1dHRvblwiXScsXG4gIERBVEFfVE9HR0xFU19CVVRUT05TIDogJ1tkYXRhLXRvZ2dsZT1cImJ1dHRvbnNcIl0gLmJ0bicsXG4gIElOUFVUICAgICAgICAgICAgICAgIDogJ2lucHV0Om5vdChbdHlwZT1cImhpZGRlblwiXSknLFxuICBBQ1RJVkUgICAgICAgICAgICAgICA6ICcuYWN0aXZlJyxcbiAgQlVUVE9OICAgICAgICAgICAgICAgOiAnLmJ0bidcbn1cblxuY29uc3QgRXZlbnQgPSB7XG4gIENMSUNLX0RBVEFfQVBJICAgICAgOiBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gLFxuICBGT0NVU19CTFVSX0RBVEFfQVBJIDogYGZvY3VzJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9IGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBgYmx1ciR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWAsXG4gIExPQURfREFUQV9BUEkgICAgICAgOiBgbG9hZCR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIEJ1dHRvbiB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudFxuICB9XG5cbiAgLy8gR2V0dGVyc1xuXG4gIHN0YXRpYyBnZXQgVkVSU0lPTigpIHtcbiAgICByZXR1cm4gVkVSU0lPTlxuICB9XG5cbiAgLy8gUHVibGljXG5cbiAgdG9nZ2xlKCkge1xuICAgIGxldCB0cmlnZ2VyQ2hhbmdlRXZlbnQgPSB0cnVlXG4gICAgbGV0IGFkZEFyaWFQcmVzc2VkID0gdHJ1ZVxuICAgIGNvbnN0IHJvb3RFbGVtZW50ID0gJCh0aGlzLl9lbGVtZW50KS5jbG9zZXN0KFxuICAgICAgU2VsZWN0b3IuREFUQV9UT0dHTEVTXG4gICAgKVswXVxuXG4gICAgaWYgKHJvb3RFbGVtZW50KSB7XG4gICAgICBjb25zdCBpbnB1dCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5JTlBVVClcblxuICAgICAgaWYgKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dC50eXBlID09PSAncmFkaW8nKSB7XG4gICAgICAgICAgaWYgKGlucHV0LmNoZWNrZWQgJiZcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZS5BQ1RJVkUpKSB7XG4gICAgICAgICAgICB0cmlnZ2VyQ2hhbmdlRXZlbnQgPSBmYWxzZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBhY3RpdmVFbGVtZW50ID0gcm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5BQ1RJVkUpXG5cbiAgICAgICAgICAgIGlmIChhY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICQoYWN0aXZlRWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXQudHlwZSA9PT0gJ2NoZWNrYm94Jykge1xuICAgICAgICAgIGlmICh0aGlzLl9lbGVtZW50LnRhZ05hbWUgPT09ICdMQUJFTCcgJiYgaW5wdXQuY2hlY2tlZCA9PT0gdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lLkFDVElWRSkpIHtcbiAgICAgICAgICAgIHRyaWdnZXJDaGFuZ2VFdmVudCA9IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGlmIGl0J3Mgbm90IGEgcmFkaW8gYnV0dG9uIG9yIGNoZWNrYm94IGRvbid0IGFkZCBhIHBvaW50bGVzcy9pbnZhbGlkIGNoZWNrZWQgcHJvcGVydHkgdG8gdGhlIGlucHV0XG4gICAgICAgICAgdHJpZ2dlckNoYW5nZUV2ZW50ID0gZmFsc2VcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlRXZlbnQpIHtcbiAgICAgICAgICBpbnB1dC5jaGVja2VkID0gIXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZS5BQ1RJVkUpXG4gICAgICAgICAgJChpbnB1dCkudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlucHV0LmZvY3VzKClcbiAgICAgICAgYWRkQXJpYVByZXNzZWQgPSBmYWxzZVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghKHRoaXMuX2VsZW1lbnQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpIHx8IHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpKSkge1xuICAgICAgaWYgKGFkZEFyaWFQcmVzc2VkKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnLFxuICAgICAgICAgICF0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUuQUNUSVZFKSlcbiAgICAgIH1cblxuICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCkge1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpXG4gICAgdGhpcy5fZWxlbWVudCA9IG51bGxcbiAgfVxuXG4gIC8vIFN0YXRpY1xuXG4gIHN0YXRpYyBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkpXG5cbiAgICAgIGlmICghZGF0YSkge1xuICAgICAgICBkYXRhID0gbmV3IEJ1dHRvbih0aGlzKVxuICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpXG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcgPT09ICd0b2dnbGUnKSB7XG4gICAgICAgIGRhdGFbY29uZmlnXSgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbiQoZG9jdW1lbnQpXG4gIC5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEVfQ0FSUk9ULCAoZXZlbnQpID0+IHtcbiAgICBsZXQgYnV0dG9uID0gZXZlbnQudGFyZ2V0XG5cbiAgICBpZiAoISQoYnV0dG9uKS5oYXNDbGFzcyhDbGFzc05hbWUuQlVUVE9OKSkge1xuICAgICAgYnV0dG9uID0gJChidXR0b24pLmNsb3Nlc3QoU2VsZWN0b3IuQlVUVE9OKVswXVxuICAgIH1cblxuICAgIGlmICghYnV0dG9uIHx8IGJ1dHRvbi5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgfHwgYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKSAvLyB3b3JrIGFyb3VuZCBGaXJlZm94IGJ1ZyAjMTU0MDk5NVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpbnB1dEJ0biA9IGJ1dHRvbi5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLklOUFVUKVxuXG4gICAgICBpZiAoaW5wdXRCdG4gJiYgKGlucHV0QnRuLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSB8fCBpbnB1dEJ0bi5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCkgLy8gd29yayBhcm91bmQgRmlyZWZveCBidWcgIzE1NDA5OTVcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJChidXR0b24pLCAndG9nZ2xlJylcbiAgICB9XG4gIH0pXG4gIC5vbihFdmVudC5GT0NVU19CTFVSX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRV9DQVJST1QsIChldmVudCkgPT4ge1xuICAgIGNvbnN0IGJ1dHRvbiA9ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KFNlbGVjdG9yLkJVVFRPTilbMF1cbiAgICAkKGJ1dHRvbikudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLkZPQ1VTLCAvXmZvY3VzKGluKT8kLy50ZXN0KGV2ZW50LnR5cGUpKVxuICB9KVxuXG4kKHdpbmRvdykub24oRXZlbnQuTE9BRF9EQVRBX0FQSSwgKCkgPT4ge1xuICAvLyBlbnN1cmUgY29ycmVjdCBhY3RpdmUgY2xhc3MgaXMgc2V0IHRvIG1hdGNoIHRoZSBjb250cm9scycgYWN0dWFsIHZhbHVlcy9zdGF0ZXNcblxuICAvLyBmaW5kIGFsbCBjaGVja2JveGVzL3JlYWRpbyBidXR0b25zIGluc2lkZSBkYXRhLXRvZ2dsZSBncm91cHNcbiAgbGV0IGJ1dHRvbnMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuREFUQV9UT0dHTEVTX0JVVFRPTlMpKVxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gYnV0dG9ucy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IGJ1dHRvbiA9IGJ1dHRvbnNbaV1cbiAgICBjb25zdCBpbnB1dCA9IGJ1dHRvbi5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLklOUFVUKVxuICAgIGlmIChpbnB1dC5jaGVja2VkIHx8IGlucHV0Lmhhc0F0dHJpYnV0ZSgnY2hlY2tlZCcpKSB7XG4gICAgICBidXR0b24uY2xhc3NMaXN0LmFkZChDbGFzc05hbWUuQUNUSVZFKVxuICAgIH0gZWxzZSB7XG4gICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZShDbGFzc05hbWUuQUNUSVZFKVxuICAgIH1cbiAgfVxuXG4gIC8vIGZpbmQgYWxsIGJ1dHRvbiB0b2dnbGVzXG4gIGJ1dHRvbnMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuREFUQV9UT0dHTEUpKVxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gYnV0dG9ucy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IGJ1dHRvbiA9IGJ1dHRvbnNbaV1cbiAgICBpZiAoYnV0dG9uLmdldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJykgPT09ICd0cnVlJykge1xuICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoQ2xhc3NOYW1lLkFDVElWRSlcbiAgICB9IGVsc2Uge1xuICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoQ2xhc3NOYW1lLkFDVElWRSlcbiAgICB9XG4gIH1cbn0pXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbiQuZm5bTkFNRV0gPSBCdXR0b24uX2pRdWVyeUludGVyZmFjZVxuJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IEJ1dHRvblxuJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gKCkgPT4ge1xuICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUXG4gIHJldHVybiBCdXR0b24uX2pRdWVyeUludGVyZmFjZVxufVxuXG5leHBvcnQgZGVmYXVsdCBCdXR0b25cbiJdLCJuYW1lcyI6WyJOQU1FIiwiVkVSU0lPTiIsIkRBVEFfS0VZIiwiRVZFTlRfS0VZIiwiREFUQV9BUElfS0VZIiwiSlFVRVJZX05PX0NPTkZMSUNUIiwiJCIsImZuIiwiQ2xhc3NOYW1lIiwiQUNUSVZFIiwiQlVUVE9OIiwiRk9DVVMiLCJTZWxlY3RvciIsIkRBVEFfVE9HR0xFX0NBUlJPVCIsIkRBVEFfVE9HR0xFUyIsIkRBVEFfVE9HR0xFIiwiREFUQV9UT0dHTEVTX0JVVFRPTlMiLCJJTlBVVCIsIkV2ZW50IiwiQ0xJQ0tfREFUQV9BUEkiLCJGT0NVU19CTFVSX0RBVEFfQVBJIiwiTE9BRF9EQVRBX0FQSSIsIkJ1dHRvbiIsImVsZW1lbnQiLCJfZWxlbWVudCIsInRvZ2dsZSIsInRyaWdnZXJDaGFuZ2VFdmVudCIsImFkZEFyaWFQcmVzc2VkIiwicm9vdEVsZW1lbnQiLCJjbG9zZXN0IiwiaW5wdXQiLCJxdWVyeVNlbGVjdG9yIiwidHlwZSIsImNoZWNrZWQiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImFjdGl2ZUVsZW1lbnQiLCJyZW1vdmVDbGFzcyIsInRhZ05hbWUiLCJ0cmlnZ2VyIiwiZm9jdXMiLCJoYXNBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJ0b2dnbGVDbGFzcyIsImRpc3Bvc2UiLCJyZW1vdmVEYXRhIiwiX2pRdWVyeUludGVyZmFjZSIsImNvbmZpZyIsImVhY2giLCJkYXRhIiwiZG9jdW1lbnQiLCJvbiIsImV2ZW50IiwiYnV0dG9uIiwidGFyZ2V0IiwiaGFzQ2xhc3MiLCJwcmV2ZW50RGVmYXVsdCIsImlucHV0QnRuIiwiY2FsbCIsInRlc3QiLCJ3aW5kb3ciLCJidXR0b25zIiwic2xpY2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaSIsImxlbiIsImxlbmd0aCIsImFkZCIsInJlbW92ZSIsImdldEF0dHJpYnV0ZSIsIkNvbnN0cnVjdG9yIiwibm9Db25mbGljdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFTQTs7Ozs7O0VBTUEsSUFBTUEsSUFBSSxHQUFrQixRQUE1QjtFQUNBLElBQU1DLE9BQU8sR0FBZSxPQUE1QjtFQUNBLElBQU1DLFFBQVEsR0FBYyxXQUE1QjtFQUNBLElBQU1DLFNBQVMsU0FBaUJELFFBQWhDO0VBQ0EsSUFBTUUsWUFBWSxHQUFVLFdBQTVCO0VBQ0EsSUFBTUMsa0JBQWtCLEdBQUlDLENBQUMsQ0FBQ0MsRUFBRixDQUFLUCxJQUFMLENBQTVCO0VBRUEsSUFBTVEsU0FBUyxHQUFHO0VBQ2hCQyxFQUFBQSxNQUFNLEVBQUcsUUFETztFQUVoQkMsRUFBQUEsTUFBTSxFQUFHLEtBRk87RUFHaEJDLEVBQUFBLEtBQUssRUFBSTtFQUhPLENBQWxCO0VBTUEsSUFBTUMsUUFBUSxHQUFHO0VBQ2ZDLEVBQUFBLGtCQUFrQixFQUFLLHlCQURSO0VBRWZDLEVBQUFBLFlBQVksRUFBVyx5QkFGUjtFQUdmQyxFQUFBQSxXQUFXLEVBQVksd0JBSFI7RUFJZkMsRUFBQUEsb0JBQW9CLEVBQUcsOEJBSlI7RUFLZkMsRUFBQUEsS0FBSyxFQUFrQiw0QkFMUjtFQU1mUixFQUFBQSxNQUFNLEVBQWlCLFNBTlI7RUFPZkMsRUFBQUEsTUFBTSxFQUFpQjtFQVBSLENBQWpCO0VBVUEsSUFBTVEsS0FBSyxHQUFHO0VBQ1pDLEVBQUFBLGNBQWMsWUFBZ0JoQixTQUFoQixHQUE0QkMsWUFEOUI7RUFFWmdCLEVBQUFBLG1CQUFtQixFQUFHLFVBQVFqQixTQUFSLEdBQW9CQyxZQUFwQixtQkFDU0QsU0FEVCxHQUNxQkMsWUFEckIsQ0FGVjtFQUlaaUIsRUFBQUEsYUFBYSxXQUFnQmxCLFNBQWhCLEdBQTRCQztFQUo3QixDQUFkO0VBT0E7Ozs7OztNQU1Na0I7OztFQUNKLGtCQUFZQyxPQUFaLEVBQXFCO0VBQ25CLFNBQUtDLFFBQUwsR0FBZ0JELE9BQWhCO0VBQ0Q7Ozs7O0VBUUQ7V0FFQUUsU0FBQSxrQkFBUztFQUNQLFFBQUlDLGtCQUFrQixHQUFHLElBQXpCO0VBQ0EsUUFBSUMsY0FBYyxHQUFHLElBQXJCO0VBQ0EsUUFBTUMsV0FBVyxHQUFHdEIsQ0FBQyxDQUFDLEtBQUtrQixRQUFOLENBQUQsQ0FBaUJLLE9BQWpCLENBQ2xCakIsUUFBUSxDQUFDRSxZQURTLEVBRWxCLENBRmtCLENBQXBCOztFQUlBLFFBQUljLFdBQUosRUFBaUI7RUFDZixVQUFNRSxLQUFLLEdBQUcsS0FBS04sUUFBTCxDQUFjTyxhQUFkLENBQTRCbkIsUUFBUSxDQUFDSyxLQUFyQyxDQUFkOztFQUVBLFVBQUlhLEtBQUosRUFBVztFQUNULFlBQUlBLEtBQUssQ0FBQ0UsSUFBTixLQUFlLE9BQW5CLEVBQTRCO0VBQzFCLGNBQUlGLEtBQUssQ0FBQ0csT0FBTixJQUNGLEtBQUtULFFBQUwsQ0FBY1UsU0FBZCxDQUF3QkMsUUFBeEIsQ0FBaUMzQixTQUFTLENBQUNDLE1BQTNDLENBREYsRUFDc0Q7RUFDcERpQixZQUFBQSxrQkFBa0IsR0FBRyxLQUFyQjtFQUNELFdBSEQsTUFHTztFQUNMLGdCQUFNVSxhQUFhLEdBQUdSLFdBQVcsQ0FBQ0csYUFBWixDQUEwQm5CLFFBQVEsQ0FBQ0gsTUFBbkMsQ0FBdEI7O0VBRUEsZ0JBQUkyQixhQUFKLEVBQW1CO0VBQ2pCOUIsY0FBQUEsQ0FBQyxDQUFDOEIsYUFBRCxDQUFELENBQWlCQyxXQUFqQixDQUE2QjdCLFNBQVMsQ0FBQ0MsTUFBdkM7RUFDRDtFQUNGO0VBQ0YsU0FYRCxNQVdPLElBQUlxQixLQUFLLENBQUNFLElBQU4sS0FBZSxVQUFuQixFQUErQjtFQUNwQyxjQUFJLEtBQUtSLFFBQUwsQ0FBY2MsT0FBZCxLQUEwQixPQUExQixJQUFxQ1IsS0FBSyxDQUFDRyxPQUFOLEtBQWtCLEtBQUtULFFBQUwsQ0FBY1UsU0FBZCxDQUF3QkMsUUFBeEIsQ0FBaUMzQixTQUFTLENBQUNDLE1BQTNDLENBQTNELEVBQStHO0VBQzdHaUIsWUFBQUEsa0JBQWtCLEdBQUcsS0FBckI7RUFDRDtFQUNGLFNBSk0sTUFJQTtFQUNMO0VBQ0FBLFVBQUFBLGtCQUFrQixHQUFHLEtBQXJCO0VBQ0Q7O0VBRUQsWUFBSUEsa0JBQUosRUFBd0I7RUFDdEJJLFVBQUFBLEtBQUssQ0FBQ0csT0FBTixHQUFnQixDQUFDLEtBQUtULFFBQUwsQ0FBY1UsU0FBZCxDQUF3QkMsUUFBeEIsQ0FBaUMzQixTQUFTLENBQUNDLE1BQTNDLENBQWpCO0VBQ0FILFVBQUFBLENBQUMsQ0FBQ3dCLEtBQUQsQ0FBRCxDQUFTUyxPQUFULENBQWlCLFFBQWpCO0VBQ0Q7O0VBRURULFFBQUFBLEtBQUssQ0FBQ1UsS0FBTjtFQUNBYixRQUFBQSxjQUFjLEdBQUcsS0FBakI7RUFDRDtFQUNGOztFQUVELFFBQUksRUFBRSxLQUFLSCxRQUFMLENBQWNpQixZQUFkLENBQTJCLFVBQTNCLEtBQTBDLEtBQUtqQixRQUFMLENBQWNVLFNBQWQsQ0FBd0JDLFFBQXhCLENBQWlDLFVBQWpDLENBQTVDLENBQUosRUFBK0Y7RUFDN0YsVUFBSVIsY0FBSixFQUFvQjtFQUNsQixhQUFLSCxRQUFMLENBQWNrQixZQUFkLENBQTJCLGNBQTNCLEVBQ0UsQ0FBQyxLQUFLbEIsUUFBTCxDQUFjVSxTQUFkLENBQXdCQyxRQUF4QixDQUFpQzNCLFNBQVMsQ0FBQ0MsTUFBM0MsQ0FESDtFQUVEOztFQUVELFVBQUlpQixrQkFBSixFQUF3QjtFQUN0QnBCLFFBQUFBLENBQUMsQ0FBQyxLQUFLa0IsUUFBTixDQUFELENBQWlCbUIsV0FBakIsQ0FBNkJuQyxTQUFTLENBQUNDLE1BQXZDO0VBQ0Q7RUFDRjtFQUNGOztXQUVEbUMsVUFBQSxtQkFBVTtFQUNSdEMsSUFBQUEsQ0FBQyxDQUFDdUMsVUFBRixDQUFhLEtBQUtyQixRQUFsQixFQUE0QnRCLFFBQTVCO0VBQ0EsU0FBS3NCLFFBQUwsR0FBZ0IsSUFBaEI7RUFDRDs7O1dBSU1zQixtQkFBUCwwQkFBd0JDLE1BQXhCLEVBQWdDO0VBQzlCLFdBQU8sS0FBS0MsSUFBTCxDQUFVLFlBQVk7RUFDM0IsVUFBSUMsSUFBSSxHQUFHM0MsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRMkMsSUFBUixDQUFhL0MsUUFBYixDQUFYOztFQUVBLFVBQUksQ0FBQytDLElBQUwsRUFBVztFQUNUQSxRQUFBQSxJQUFJLEdBQUcsSUFBSTNCLE1BQUosQ0FBVyxJQUFYLENBQVA7RUFDQWhCLFFBQUFBLENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUTJDLElBQVIsQ0FBYS9DLFFBQWIsRUFBdUIrQyxJQUF2QjtFQUNEOztFQUVELFVBQUlGLE1BQU0sS0FBSyxRQUFmLEVBQXlCO0VBQ3ZCRSxRQUFBQSxJQUFJLENBQUNGLE1BQUQsQ0FBSjtFQUNEO0VBQ0YsS0FYTSxDQUFQO0VBWUQ7Ozs7MEJBL0VvQjtFQUNuQixhQUFPOUMsT0FBUDtFQUNEOzs7OztFQWdGSDs7Ozs7OztFQU1BSyxDQUFDLENBQUM0QyxRQUFELENBQUQsQ0FDR0MsRUFESCxDQUNNakMsS0FBSyxDQUFDQyxjQURaLEVBQzRCUCxRQUFRLENBQUNDLGtCQURyQyxFQUN5RCxVQUFDdUMsS0FBRCxFQUFXO0VBQ2hFLE1BQUlDLE1BQU0sR0FBR0QsS0FBSyxDQUFDRSxNQUFuQjs7RUFFQSxNQUFJLENBQUNoRCxDQUFDLENBQUMrQyxNQUFELENBQUQsQ0FBVUUsUUFBVixDQUFtQi9DLFNBQVMsQ0FBQ0UsTUFBN0IsQ0FBTCxFQUEyQztFQUN6QzJDLElBQUFBLE1BQU0sR0FBRy9DLENBQUMsQ0FBQytDLE1BQUQsQ0FBRCxDQUFVeEIsT0FBVixDQUFrQmpCLFFBQVEsQ0FBQ0YsTUFBM0IsRUFBbUMsQ0FBbkMsQ0FBVDtFQUNEOztFQUVELE1BQUksQ0FBQzJDLE1BQUQsSUFBV0EsTUFBTSxDQUFDWixZQUFQLENBQW9CLFVBQXBCLENBQVgsSUFBOENZLE1BQU0sQ0FBQ25CLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCLFVBQTFCLENBQWxELEVBQXlGO0VBQ3ZGaUIsSUFBQUEsS0FBSyxDQUFDSSxjQUFOLEdBRHVGO0VBRXhGLEdBRkQsTUFFTztFQUNMLFFBQU1DLFFBQVEsR0FBR0osTUFBTSxDQUFDdEIsYUFBUCxDQUFxQm5CLFFBQVEsQ0FBQ0ssS0FBOUIsQ0FBakI7O0VBRUEsUUFBSXdDLFFBQVEsS0FBS0EsUUFBUSxDQUFDaEIsWUFBVCxDQUFzQixVQUF0QixLQUFxQ2dCLFFBQVEsQ0FBQ3ZCLFNBQVQsQ0FBbUJDLFFBQW5CLENBQTRCLFVBQTVCLENBQTFDLENBQVosRUFBZ0c7RUFDOUZpQixNQUFBQSxLQUFLLENBQUNJLGNBQU4sR0FEOEY7O0VBRTlGO0VBQ0Q7O0VBRURsQyxJQUFBQSxNQUFNLENBQUN3QixnQkFBUCxDQUF3QlksSUFBeEIsQ0FBNkJwRCxDQUFDLENBQUMrQyxNQUFELENBQTlCLEVBQXdDLFFBQXhDO0VBQ0Q7RUFDRixDQXBCSCxFQXFCR0YsRUFyQkgsQ0FxQk1qQyxLQUFLLENBQUNFLG1CQXJCWixFQXFCaUNSLFFBQVEsQ0FBQ0Msa0JBckIxQyxFQXFCOEQsVUFBQ3VDLEtBQUQsRUFBVztFQUNyRSxNQUFNQyxNQUFNLEdBQUcvQyxDQUFDLENBQUM4QyxLQUFLLENBQUNFLE1BQVAsQ0FBRCxDQUFnQnpCLE9BQWhCLENBQXdCakIsUUFBUSxDQUFDRixNQUFqQyxFQUF5QyxDQUF6QyxDQUFmO0VBQ0FKLEVBQUFBLENBQUMsQ0FBQytDLE1BQUQsQ0FBRCxDQUFVVixXQUFWLENBQXNCbkMsU0FBUyxDQUFDRyxLQUFoQyxFQUF1QyxlQUFlZ0QsSUFBZixDQUFvQlAsS0FBSyxDQUFDcEIsSUFBMUIsQ0FBdkM7RUFDRCxDQXhCSDtFQTBCQTFCLENBQUMsQ0FBQ3NELE1BQUQsQ0FBRCxDQUFVVCxFQUFWLENBQWFqQyxLQUFLLENBQUNHLGFBQW5CLEVBQWtDLFlBQU07RUFDdEM7RUFFQTtFQUNBLE1BQUl3QyxPQUFPLEdBQUcsR0FBR0MsS0FBSCxDQUFTSixJQUFULENBQWNSLFFBQVEsQ0FBQ2EsZ0JBQVQsQ0FBMEJuRCxRQUFRLENBQUNJLG9CQUFuQyxDQUFkLENBQWQ7O0VBQ0EsT0FBSyxJQUFJZ0QsQ0FBQyxHQUFHLENBQVIsRUFBV0MsR0FBRyxHQUFHSixPQUFPLENBQUNLLE1BQTlCLEVBQXNDRixDQUFDLEdBQUdDLEdBQTFDLEVBQStDRCxDQUFDLEVBQWhELEVBQW9EO0VBQ2xELFFBQU1YLE1BQU0sR0FBR1EsT0FBTyxDQUFDRyxDQUFELENBQXRCO0VBQ0EsUUFBTWxDLEtBQUssR0FBR3VCLE1BQU0sQ0FBQ3RCLGFBQVAsQ0FBcUJuQixRQUFRLENBQUNLLEtBQTlCLENBQWQ7O0VBQ0EsUUFBSWEsS0FBSyxDQUFDRyxPQUFOLElBQWlCSCxLQUFLLENBQUNXLFlBQU4sQ0FBbUIsU0FBbkIsQ0FBckIsRUFBb0Q7RUFDbERZLE1BQUFBLE1BQU0sQ0FBQ25CLFNBQVAsQ0FBaUJpQyxHQUFqQixDQUFxQjNELFNBQVMsQ0FBQ0MsTUFBL0I7RUFDRCxLQUZELE1BRU87RUFDTDRDLE1BQUFBLE1BQU0sQ0FBQ25CLFNBQVAsQ0FBaUJrQyxNQUFqQixDQUF3QjVELFNBQVMsQ0FBQ0MsTUFBbEM7RUFDRDtFQUNGLEdBYnFDOzs7RUFnQnRDb0QsRUFBQUEsT0FBTyxHQUFHLEdBQUdDLEtBQUgsQ0FBU0osSUFBVCxDQUFjUixRQUFRLENBQUNhLGdCQUFULENBQTBCbkQsUUFBUSxDQUFDRyxXQUFuQyxDQUFkLENBQVY7O0VBQ0EsT0FBSyxJQUFJaUQsRUFBQyxHQUFHLENBQVIsRUFBV0MsSUFBRyxHQUFHSixPQUFPLENBQUNLLE1BQTlCLEVBQXNDRixFQUFDLEdBQUdDLElBQTFDLEVBQStDRCxFQUFDLEVBQWhELEVBQW9EO0VBQ2xELFFBQU1YLE9BQU0sR0FBR1EsT0FBTyxDQUFDRyxFQUFELENBQXRCOztFQUNBLFFBQUlYLE9BQU0sQ0FBQ2dCLFlBQVAsQ0FBb0IsY0FBcEIsTUFBd0MsTUFBNUMsRUFBb0Q7RUFDbERoQixNQUFBQSxPQUFNLENBQUNuQixTQUFQLENBQWlCaUMsR0FBakIsQ0FBcUIzRCxTQUFTLENBQUNDLE1BQS9CO0VBQ0QsS0FGRCxNQUVPO0VBQ0w0QyxNQUFBQSxPQUFNLENBQUNuQixTQUFQLENBQWlCa0MsTUFBakIsQ0FBd0I1RCxTQUFTLENBQUNDLE1BQWxDO0VBQ0Q7RUFDRjtFQUNGLENBekJEO0VBMkJBOzs7Ozs7RUFNQUgsQ0FBQyxDQUFDQyxFQUFGLENBQUtQLElBQUwsSUFBYXNCLE1BQU0sQ0FBQ3dCLGdCQUFwQjtFQUNBeEMsQ0FBQyxDQUFDQyxFQUFGLENBQUtQLElBQUwsRUFBV3NFLFdBQVgsR0FBeUJoRCxNQUF6Qjs7RUFDQWhCLENBQUMsQ0FBQ0MsRUFBRixDQUFLUCxJQUFMLEVBQVd1RSxVQUFYLEdBQXdCLFlBQU07RUFDNUJqRSxFQUFBQSxDQUFDLENBQUNDLEVBQUYsQ0FBS1AsSUFBTCxJQUFhSyxrQkFBYjtFQUNBLFNBQU9pQixNQUFNLENBQUN3QixnQkFBZDtFQUNELENBSEQ7Ozs7Ozs7OyJ9
